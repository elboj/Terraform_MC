trigger:
- manual
stages:
- stage: Build
  jobs:
  - job: Build

    pool:
      vmImage: windows-2019
    steps:

    - task: CopyFiles@2
      inputs:
        SourceFolder: 'Week_1'
        Contents: '**'
        TargetFolder: '$(build.artifactstagingdirectory)/main'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'
  
- stage: Deploy
  jobs:
  - job: Deploy
    
    pool:
      vmImage: windows-2019
    steps:

    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'specific'
        downloadPath: '$(System.DefaultWorkingDirectory)/_artifact'
        artifactName: 'drop'

    - task: AzureCLI@2
      inputs:
        azureSubscription: 'Azure subscription 1 (8bf20060-c4ab-41d0-a67f-ea773eab84db)'
        scriptType: 'ps'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az storage container create --name neblus-eastus --account-name $(TERRAFORMSTORAGEACCOUNT)
          
          az storage account keys list -g $(STORAGERG) -n $(TERRAFORMSTORAGEACCOUNT)
    - task: AzurePowerShell@3
      inputs:
        azureSubscription: 'Azure subscription 1 (8bf20060-c4ab-41d0-a67f-ea773eab84db)'
        ScriptType: 'InlineScript'
        Inline: |
          # Using this script we will fetch storage key which is required in terraform file to authenticate backend storage account
          
          $key=(Get-AzureRmStorageAccountKey -ResourceGroupName $(STORAGERG) -AccountName $(TERRAFORMSTORAGEACCOUNT)).Value[0]
          
          Write-Host "##vso[task.setvariable variable=storagekey]$key"
          
          echo $key
        azurePowerShellVersion: 'LatestVersion'
        
    - task: replacetokens@5
      inputs:
        targetFiles: '**/*.tf'
        encoding: 'auto'
        tokenPattern: 'custom'
        tokenPrefix: '__'
        tokenSuffix: '__'
        writeBOM: true
        escapeType: 'none'
        actionOnMissing: 'warn'
        keepToken: false
        actionOnNoFiles: 'continue'
        enableTransforms: false
        enableRecursion: false
        useLegacyPattern: false
        enableTelemetry: true

    - script: |
         echo ${env:Release.EnvironmentName}
      displayName: 'Testing Deploying is working'
    
    - task: TerraformTaskV4@4
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/_artifact/drop/main/NEBLUS-VM-EastUS/'
        backendServiceArm: 'Azure subscription 1 (8bf20060-c4ab-41d0-a67f-ea773eab84db)'
        backendAzureRmResourceGroupName: '$(STORAGERG)'
        backendAzureRmStorageAccountName: '$(TERRAFORMSTORAGEACCOUNT)'
        backendAzureRmContainerName: 'neblus-eastus'
        backendAzureRmKey: 'new_folder/terraform.tfstate'
        
    # - script: |
    #     echo 'Welcome to deploy stage'
    #   displayName: 'Testing Deploying is working'

        


